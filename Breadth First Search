// Implementing Breadth First Search in C++

#include<iostream> 
using namespace std; 
#define V 5 
#define size 25
int Queue[size]; 
int front = 0; 
int rear = 0;  
int isQueueEmpty()  { 
    if(front==rear) 
       return 1; 
    return 0;    
} 
int deQueue()  { 
    if(front==rear) 
       return -1; 
    else 
    { 
      int temp = Queue[front]; 
      front++; 
      return temp; 
    } 
} 
void enQueue(int val)  { 
    if (rear==size) 
        return; 
    else 
        Queue[rear] = val; 
        rear++; 
} 
void bfs(int arr[V][V], int source)  { 
    int isvisited[V] = {0}; 
    int index; 
    enQueue(source); 
    isvisited[source] = 1; 
    while (!isQueueEmpty()) 
    { 
        int node = deQueue(); 
        cout<<"Visited Node:"<<node<<endl; 
        for (index = 0; index < V; index++) 
        { 
            if(arr[node][index] == 1 && isvisited[index] == 0) 
            { 
                 enQueue(index); 
                 isvisited[index] = 1; 
            } 
        } 
    } 
} 
int main() 
{ 
    int arr[V][V]={ 
        {0,1,1,1,0}, 
        {1,0,0,1,1}, 
        {1,0,0,1,0}, 
        {1,1,1,0,1}, 
        {0,1,0,1,0}, 
    }; 
bfs(arr,0); 
return 0; 
}
